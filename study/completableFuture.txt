CompletableFuture
- 2014년에 발표 된 java8에서 처음 도입
- 비동기 프로그래밍 지원
- Lambda, Method reference 등 java 8의 새로운 기능 지원

> Future
    - 비동기적인 작업을 수행
    - 해당 작업이 완료되면 결과를 반환하는 인터페이스
> CompletionStage
    - 비동기적인 작업을 수행
    - 해당 작업이 완료되면 결과를 처리하거나 다른 CompletionStage를 연결하는 인터페이스

> ExecutorService
    - 쓰레드 풀을 이용하여 비동기적으로 작업을 실행하고 관리
    - 별도의 쓰레드를 생성하고 관리하지 않아도 되므로, 코드를 간결하게 유지 가능
    - 쓰레드 풀을 이용하여 자원을 효율적으로 관리

    execute: Runnable interface를 구현한 작업을 쓰레드 풀에서 비동기적으로 실행
    submit: Callable interface를 구현한 작업을 쓰레드 풀에서 비동기적으로 실행하고, 해당 작업의 결과를 Future<T> 객체로 반환
    shutdown: ExecutorService를 종료. 더 이상 task를 받지 않는다.

    newSingleThreadExecutor: 단일 쓰레드로 구성된 쓰레드 풀을 생성. 한번에 하나의 작업만 실행
    newFixedThreadPool: 고정된 크기의 쓰레드 풀을 생성. 크기는 인자로 주어진 n과 동일
    newCachedThreadPool: 사용 가능한 쓰레드가 없다면 새로 생성해서 작업을 처리하고, 있다면 재사용. 쓰레드가 일정 시간 사용되지 않으면 회수
    newScheduledThreadPool: 스케줄링 기능을 갖춘 고정 크기의 쓰레드 풀을 생성. 주기적이거나 지연이 발생하는 작업을 실행.
    newWorkStealingPool: work steal 알고리즘을 사용하는 ForkJoinPool을 생성

> FutureHelper
    getFuture: 새로운 쓰레드를 생성하여 1을 반환
    getFutureCompleteAfter1S: 새로운 쓰레드를 생성하고 1초 대기 후 1을 반환

> Future: isDone(), isCancelled()
    - future의 상태 반환
    - isDone: task가 완료되었다면, 원인과 상관없이 true 반환
    - isCanclelled: task가 명시적으로 취소된 경우, true 반환

> Future: get()
    - 결과를 구할 때까지 thread가 계속 block
    - future에서 무한 루프나 오래 시간이 걸린다면 thread가 blocking 상태 유지

    Future future = FutureHelper.getFuture();
    assert !future.isDone();
    assert !future.isCancelled();

    var result = future.get();
    assert result.equals(1); // true
    assert result.isDone(); //true
    assert !future.isCancelled(); //true

> Future: cancel(boolean mayInterruptIfRunning)
    - future의 작업 실행을 취소
    - 취소할 수 없는 상황이라면 false를 반환
    - mayInterruptIfRunning가 false라면 시작하지 않은 작업에 대해서만 취소

    Future future = FutureHelper.getFuture();
    var successToCancel = future.cancel(true); // 이 것으로 인해서 작업이 취소가 됨
    assert future.isCancelled();
    assert future.isDone();
    assert successToCancel;

    successToCancel = future.cancel(true); // 취소한 것을 또 취소
    assert future.isCancelled(); // 이전 상태의 값으로 판단 true
    assert future.isDone(); // 이전 상태의 값으로 판단 true
    assert !successToCancel; // 이미 취소한 것을 또 취소하려했기 때문에 successToCancel는 false

> Future 인터페이스의 한계
    - cancel을 제외하고 외부에서 future를 컨트롤할 수없다.
    - 반환된 결과를 get() 해서 접근하기 때문에 비동기 처리가 어렵다.
    - 완료되거나 에러가 발생했는지 구분하기 어렵다.

