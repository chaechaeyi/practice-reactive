future는 비동기적으로 요청을 수행할 수있지만 get을 통해 접근을 해야하기 때문에 비동기 처리를 하기에는 한계가 있다.
completionStage는 파이프라인을 통해 기능들을 체이닝해서 사용이 가능하다. exceptionally를 통해서 예외 처리에도 용이하다.

public class CompletableFuture<T> implements Future<T>, CompletionStage<T> {
    /** 아무런 인자를 받지 않음 - 값을 최초로 생성해서 내려주는 기능 */
    public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier) { … }
    /**
     * Runnable을 제공하여 CompletableFuture를 생성할 수 있다.
     * 값을 반환하지 않으므로 다음 task에 null이 전달된다.
     */
    public static CompletableFuture<Void> runAsync(Runnable runnable) { … }
    public boolean complete(T value) { … }
    public boolean isCompletedExceptionally() { … }
    public static CompletableFuture<Void> allOf(CompletableFuture<?> . cfs) { … }
    public static CompletableFuture<Object> anyOf(CompletableFuture<?> . cfs) { … }
}

future의 경우에는 isDone, isCanceled 밖에 제공을 하지 않는데
completableFuture의 경우에는 isDone, isCompletedExceptionally, isCanceled를 제공을 해주어서 더 정교하게 작업 가능하다.