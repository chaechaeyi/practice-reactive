CompletionStage Interface

파이프를 연결해서 기능들을 사용하는 것이 가능하다.
public interface CompletionStage<T> {
    public <U> CompletionStage<U> thenApply(Function<? super T,? extends U> fn);
    public <U> CompletionStage<U> thenApplyAsync(Function<? super T,? extends U> fn);
    public CompletionStage<Void> thenAccept(Consumer<? super T> action);
    public CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action);
    public CompletionStage<Void> thenRun(Runnable action);
    public CompletionStage<Void> thenRunAsync(Runnable action);
    public <U> CompletionStage<U> thenCompose(Function<? super T, ? extends CompletionStage<U > fn);
    public <U> CompletionStage<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U > fn);
    public CompletionStage<T> exceptionally(Function<Throwable, ? extends T> fn);
}

CompletionStage 연산자 조홥
    - 50개 가까운 연산자들을 활용하여 비동기 task들을 실행하고 값을 변경하는 등 chaining을 이용한 조합 가능
    - 에러를 처리하기 위한 콜백 제공

    - 그럼 이 부분이 비동기로 처리되려면 어떻게 해야하는가? 비동기는 별도의 thread pool이 필요하다.
    - completableFuture는 내부적으로 비동기 함수를 실행하기 위해 ForkJoinPool을 사용한다.
    - ForkJoinPool의 기본 size = 할당된 cpu 코어 -1
    - 데몬쓰레드. main 쓰레드가 종료되면 즉각적으로 종료
      (데몬 쓰레드란? 다른 일반 쓰레드(데몬 쓰레드가 아닌 쓰레드)의 작업을 돕는 보조적인 역할을 수행하는 쓰레드.
      데몬 쓰레드는 일반 쓰레드의 보조 역할을 수행하므로 일반 쓰레드가 모두 종료되고 나면 데몬 쓰레드의 존재의 의미가 없기 때문에 같이 종료가 된다.)
    - Task를 fork를 통해서 subtask로 나누고
    - thread pool에서 steal work 알고리즘을 이용해서 균등하게 처리를 해서 join을 통해서 결과를 생성한다.

CompletionStage 연산자와 연결
    Consumer-accept method : thenAccept(Consumer action) : void 반환
        - Consumer를 파라미터로 받는다.
        - 이전 task로부터 값을 받지만 값을 넘기지 않는다.
        - 다음 task에게 null이 전달된다.
        - 값을 받아서 action만 수행하는 경우 유용
        thenAccept() - caller thread에서 action 실행
        thenAcceptAsync() - thread pool에 있는 thread에서 action 실행
    Function-apply method : thenApply(Function fn) : 값을 받아서 값을 변형해서 반환
    Function-compose method(추상 method X) : thenCompose(Function fn)
    Runnable-run method : thenRun(Runnable action) : action만 수행

exceptionally를 통해서 exception 처리가 가능하다.

